// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pilotSolve
SEXP pilotSolve(const SEXP Y_r, const SEXP X_r, const SEXP B_r, const SEXP C_r, const SEXP tol_r, const SEXP Max_r, const SEXP rank_r);
RcppExport SEXP _MVCM_binary_pilotSolve(SEXP Y_rSEXP, SEXP X_rSEXP, SEXP B_rSEXP, SEXP C_rSEXP, SEXP tol_rSEXP, SEXP Max_rSEXP, SEXP rank_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type Y_r(Y_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type X_r(X_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type B_r(B_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type C_r(C_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type tol_r(tol_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type Max_r(Max_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rank_r(rank_rSEXP);
    rcpp_result_gen = Rcpp::wrap(pilotSolve(Y_r, X_r, B_r, C_r, tol_r, Max_r, rank_r));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MVCM_binary_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MVCM_binary_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MVCM_binary_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MVCM_binary_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// updateA
SEXP updateA(const SEXP Y_r, const SEXP X_r, const SEXP Theta_r, const SEXP B_r, const SEXP A_r, const SEXP tol_r, const SEXP Max_r, const SEXP subMax_r, SEXP beta_r, SEXP alpha_r, SEXP sigma_r);
RcppExport SEXP _MVCM_binary_updateA(SEXP Y_rSEXP, SEXP X_rSEXP, SEXP Theta_rSEXP, SEXP B_rSEXP, SEXP A_rSEXP, SEXP tol_rSEXP, SEXP Max_rSEXP, SEXP subMax_rSEXP, SEXP beta_rSEXP, SEXP alpha_rSEXP, SEXP sigma_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type Y_r(Y_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type X_r(X_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type Theta_r(Theta_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type B_r(B_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type A_r(A_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type tol_r(tol_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type Max_r(Max_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type subMax_r(subMax_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_r(beta_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_r(alpha_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_r(sigma_rSEXP);
    rcpp_result_gen = Rcpp::wrap(updateA(Y_r, X_r, Theta_r, B_r, A_r, tol_r, Max_r, subMax_r, beta_r, alpha_r, sigma_r));
    return rcpp_result_gen;
END_RCPP
}
// update_Theta
SEXP update_Theta(const SEXP Theta_r, const SEXP Y_r, const SEXP X_r, SEXP B_r, const SEXP A_r, const SEXP lambda_r, const SEXP tol_r, const SEXP MaxIt_r, const SEXP tau_r, const SEXP m_r, const SEXP method_r, const SEXP a_r);
RcppExport SEXP _MVCM_binary_update_Theta(SEXP Theta_rSEXP, SEXP Y_rSEXP, SEXP X_rSEXP, SEXP B_rSEXP, SEXP A_rSEXP, SEXP lambda_rSEXP, SEXP tol_rSEXP, SEXP MaxIt_rSEXP, SEXP tau_rSEXP, SEXP m_rSEXP, SEXP method_rSEXP, SEXP a_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type Theta_r(Theta_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type Y_r(Y_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type X_r(X_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_r(B_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type A_r(A_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type lambda_r(lambda_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type tol_r(tol_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type MaxIt_r(MaxIt_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type tau_r(tau_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type m_r(m_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type method_r(method_rSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type a_r(a_rSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Theta(Theta_r, Y_r, X_r, B_r, A_r, lambda_r, tol_r, MaxIt_r, tau_r, m_r, method_r, a_r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MVCM_binary_pilotSolve", (DL_FUNC) &_MVCM_binary_pilotSolve, 7},
    {"_MVCM_binary_rcpparma_hello_world", (DL_FUNC) &_MVCM_binary_rcpparma_hello_world, 0},
    {"_MVCM_binary_rcpparma_outerproduct", (DL_FUNC) &_MVCM_binary_rcpparma_outerproduct, 1},
    {"_MVCM_binary_rcpparma_innerproduct", (DL_FUNC) &_MVCM_binary_rcpparma_innerproduct, 1},
    {"_MVCM_binary_rcpparma_bothproducts", (DL_FUNC) &_MVCM_binary_rcpparma_bothproducts, 1},
    {"_MVCM_binary_updateA", (DL_FUNC) &_MVCM_binary_updateA, 11},
    {"_MVCM_binary_update_Theta", (DL_FUNC) &_MVCM_binary_update_Theta, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_MVCM_binary(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
